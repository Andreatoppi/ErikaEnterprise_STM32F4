/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2013  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */

/*
 * Trying to use several tasks, alarms, events, linked with interrupts and events.
 *
 * Author: Andrea Toppi.
 */

CPU mySystem {

	OS myOs {

		EE_OPT = "DEBUG";
		//EE_OPT = "__KEIL_4_54_OLDER__";
		EE_OPT = "__KEIL_USE_AXF_EXT__";
		
		
		CPU_DATA = CORTEX_MX {
			MODEL = M4;
			APP_SRC = "code.c";
			APP_SRC = "tm_stm32f4_hd44780.c";
			APP_SRC = "tm_stm32f4_delay/tm_stm32f4_delay.c";
			APP_SRC = "tm_stm32f4_delay/tm_stm32f4_timer_properties.c";
			APP_SRC = "tm_stm32f4_gpio/tm_stm32f4_gpio.c";
			//COMPILER_TYPE = KEIL; 
			COMPILER_TYPE = GNU;
			MULTI_STACK = TRUE;
		};

		EE_OPT = "__USE_CMSIS_ALL__";
		EE_OPT = "__USE_SPD_ALL__";
		EE_OPT = "__USE_SYSTICK__";
		EE_OPT = "__ADD_LIBS__";
		EE_OPT = "__MULTI__";
		EE_OPT = "__OO_ECC1__";
		
		MCU_DATA = STM32 {
			MODEL = STM32F4xx;
		};

		EE_OPT = "__ADD_LIBS__";
		
		LIB = ENABLE { NAME = "ST_CMSIS"; };
		
		LIB = ENABLE { NAME = "STM32F4XX_SPD"; 
			STM32F4XX_SPD = ENABLE {
				USEGPIO = TRUE;
				USESPI = TRUE;
				USEEXTI = TRUE;
				USEMISC = TRUE;
				USEFLASH = TRUE;
				USEI2C = TRUE;
				USEDMA = TRUE;
				USEUSART = TRUE;
				//USESYSCFG = TRUE;
			};
		};
		
		LIB = ENABLE {
			NAME = "STM32F4_DISCOVERY";
			STM32F4_DISCOVERY = ENABLE {
                		USELEDS = TRUE;
                		USECOM = TRUE;
                		USEBUTTONS = TRUE;
			};			
		};

		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;

		KERNEL_TYPE = ECC1;

	};
 	
	COUNTER counterOne{
		MINCYCLE = 10;
		MAXALLOWEDVALUE = 3000;
		TICKSPERBASE = 3000;
		};
		
	COUNTER delay{
		MAXALLOWEDVALUE = 100;
		TICKSPERBASE = 100;
		MINCYCLE = 10;
	};
	
	COUNTER resetLcd {
		MINCYCLE = 10;
		MAXALLOWEDVALUE = 2000;
		TICKSPERBASE = 2000;
	};
	
	ALARM ResetLcd {
		COUNTER = resetLcd;
		ACTION =  ALARMCALLBACK {
			ALARMCALLBACKNAME = "PrintHello";};
	};
	
	ALARM AlarmLedBlink {
		COUNTER = counterOne;
		ACTION = ACTIVATETASK { TASK = TaskLedBlink; };
	};
	
	ALARM DelayOne {
		COUNTER = delay;
		ACTION =  ALARMCALLBACK {
			ALARMCALLBACKNAME = "ToggleRxLed";};
	};
	
	TASK TaskLedBlink {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskButton {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
	};
	
	TASK TaskLcd {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = PRIVATE {
			SYS_SIZE = 512;
		};
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
		EVENT = Print;
	};
	
	TASK TaskReceive {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = PRIVATE {
			SYS_SIZE = 512;
		};
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
		EVENT = Receive;
	};
	
	TASK TaskSend {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = PRIVATE {
			SYS_SIZE = 512;
		};
		ACTIVATION = 1;    /* only one pending activation */
		SCHEDULE = FULL;
		EVENT = Send;
	};
	
	EVENT Receive { MASK = AUTO; };
	
	EVENT Send { MASK = AUTO; };

	EVENT Print { MASK = AUTO; };
	
	ISR exti0_irq_handler {
		CATEGORY = 1;
		ENTRY = "EXTI0";
		PRIORITY = 2;
	};
	
	/*
	 * usart e interrupt handler.
	 * See: /test_chain/ErikaEnterprise/pkg/mcu/st_stm32_stm32f4xx/inc/ee_mcuirqs.h
	 */
	ISR usart3_irq_handler {
		CATEGORY = 1;
		ENTRY = "USART3";
		PRIORITY = 3;
	};
	
	ISR systick_handler {
		CATEGORY = 2;
		ENTRY = "SYSTICK";
		PRIORITY = 1;
	};
};
